Argon
=====
Note: Argon is still under active development. Most features are complete, but
it is still being tested for robustness.

Argon is a platform for distributed services written in Perl. Its goals are:

    * Simple design of distributed systems
    * Uniformity of workers
    * Bounded queues
    * Robust design


Simple design of distributed systems
------------------------------------
Argon applications are built from simple components. The most basic piece is an
Argon::Worker, which manages a configurable pool of local Perl processes.
Acting in stand-alone mode, a worker can listen on a TCP/IP socket and accept
new tasks.

Multiple workers work in tandem through an Argon::Manager. Managers maintain a
pool of workers, routing tasks to the most available worker based on it's
recent performance and current load.

Tasks are assigned by passing code directly to the queue() method of
Argon::Client. Because all components of the system use the same protocol, it
does not matter whether a client connects to a worker or manager. Tasks are
sent to the specified entry point to the Argon application and routed
appropriately. The client's caller is suspended (using Coro) until the task is
successfully completed.


Uniformity of workers
--------------------------
In a typical distributed computing platform, individual worker processes handle
a specific type of task. To increase resources available to tasks of a
particular type, more worker processes are launched and configured to query a
specific job queue. This is an inefficient way to manage resources. During a
spike in task traffic, tasks with fewer workers assigned to them cannot take
advantage of idle workers allocated to other tasks.

Argon workers manage a pool of Perl processes. Any worker may handle any type
of task. This way, no worker processes remain idle while another, busier
worker's backlog grows. This system prevents backlogs and ensures that the
system more responsive.


Bounded queues
--------------
Task queues are bounded. By enforcing a cap on the number of tasks that may be
queued, the application is protected from DOS-like attacks and remains
responsive at all times. This prevents queues from growing so large that a
spike in traffic causes a secondary delay in restoring responsiveness as the
backlog of tasks are first cleared.

Tasks that cannot be added due to queue constraints are rejected and the client
software is notified. Client software will automatically and transparently
retry tasks that have been rejected.


Robust design
-------------
Argon is designed to ensure that all parts of the system function independently
of the other parts. Workers do not crash if their manager becomes unavailable
and vice versa; mnagers will continue to route to any available nodes until a
disconnected worker comes back online.

New workers may be added to the system without restarting the manager. This
allows an application administrator to seamlessly boost performance without
interrupting service for existing clients.

Usage
=====
See `/bin` for examples of usage.

LICENSE AND COPYRIGHT
=====================

Copyright (C) 2013 "Jeff Ober"

This program is free software; you can redistribute it and/or modify it
under the terms of either: the GNU General Public License as published
by the Free Software Foundation; or the Artistic License.

See http://dev.perl.org/licenses/ for more information.
